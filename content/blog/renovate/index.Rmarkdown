---
title: A Fresh Lick of Paint
author: Carl Goodwin
date: '2022-04-08'
slug: renovate
categories:
  - R
tags:
  - web site
summary: A couple of years ago I [moved house](/blog/plunge) from Wordpress to [Blogdown](https://bookdown.org/yihui/blogdown/). It's a less stressful life and I plan to stay. [Hugo Academic](https://academic-demo.netlify.app) served me well, but sometimes you just need a fresh coat of paint.
lastmod: '`r Sys.Date()`'
draft: false
featured: false
---

![](/blog/renovate/featured.GIF)

## Motivation

A couple of years ago I [moved house](/blog/plunge) from Wordpress to [Blogdown](https://bookdown.org/yihui/blogdown/). It's proved to be a much less stressful life and I plan to stay. [Hugo Academic](https://academic-demo.netlify.app) served me well, but sometimes you just need a fresh coat of paint. I liked the look of [Hugo Apéro](https://hugo-apero-docs.netlify.app).

Apéro feels simpler and has an elegant design with well-chosen themes and fonts.

I like to add my own digital art to both the site and Rmarkdown projects, and Apéro gives me more flexibility here.  GIF animations, for example, on my [home page](/.) and in my project and [blog](/blog/) lists just work.

The tag cloud and dark mode I had with Academic would be nice-to-haves, but not essential.

## Plan of Attack

The upgrade approach I took was to create a brand new blogdown project in RStudio with the Apéro theme and then copy over and re-knit my projects one by one. This worked well because every project needed at least one change as a direct consequence of the move and re-opening each project also prompted other beneficial updates.

I focused first on manual deployment, i.e. dragging the Public folder to Netlify, rather than going straight to continuous deployment via Github. Doing it this way would narrow the potential cause of any problems when doing the latter. I also initially deployed to one of Netlify's auto-generated site names, so my live manually-deployed Academic blog remained unaffected whilst preparing the new site.

## Set-up

There's a very helpful [get started](https://hugo-apero-docs.netlify.app/start/) authored by the theme owner Alison Hill, so I'll comment here only on the personal touches I wanted to add.

In Hugo Academic, each project's (or post's) feature image rendered automatically in both the project list page and in the individual project. In Apéro, I needed to add `![](pathname)` to the Rmarkdown file to render the image in an individual project or post. I actually prefer this approach because it means the image then also appears when re-publishing to a blog aggregator which frustratingly was not the case with Academic.

Given the taxonomy differences, I created a `static/_redirects` file so that bookmarks for, say, `category/r` or `tag/statistical-inference` (under Academic) would go to `categories/r` or `tags/statistical-inference`.

```{r echo=FALSE, message=FALSE, warning=FALSE}

cat(readLines("/Users/carl/R Projects/quantumjitter/static/_redirects"), sep = '\n')
```

I had customised my Academic site to show the *updated*, as well as *posted*, date for each project and post. So to get the same in Apéro, I copied the `themes > hugo-apero > layouts > partials > shared > post-details.html` file to `layouts > partials > shared > post-details.html` and inserted the last 4 lines below. As my YAML header for all projects and posts already included `lastmod:`, the *details* twistie at the foot of each project (and post) now shows both dates.

![](/blog/renovate/lastmod.png)

## Deployment

### Manual

Initially a few things did not render correctly, e.g. syntax highlighting, which it turned out required renaming the `index.Rmd` files to `index.Rmarkdown`. And when the manual deployment to Netlify got stuck uploading, I realised I also needed to change the `.Rprofile` to `blogdown.method = 'markdown'` rather than `blogdown.method = 'html'`.

### Continuous

Once the manual deployment to Netlify was working, I then moved on to continuous deployment via Github. I wanted to switch the commenting engine from Disqus to [utterance.es](https://utteranc.es) and, as is often the case, wanting one thing results in the need for a bunch of other things; in this case, a public repo on Github. [Installing](https://github.com/apps/utterances) the latter provides a more elegant fit with the Apéro design and has some nice advantages. 

And because I wanted to deploy a *pre-existing* RStudio project to Github, rather than following the usual Github-first practice, I found this [guidance](https://happygitwithr.com/existing-github-first.html) helpful.

I played around a bit with the `.gitignore` file and found I could exclude quite a lot of stuff that Netlify would not need to do the Hugo build.

Regarding API keys, I had previously used a hidden code-chunk in Rmarkdown. It felt like time to be a little more rigorous and use the [keyring package](https://github.com/r-lib/keyring) for storing these.

The Netlify deployment via Github did initially fail with a "Base directory does not exist" message. The fix there was to leave the base directory in Netlify's build settings blank rather than using the repo URL (which it already had under current repository).


![](/blog/renovate/netlify.png)

Running `blogdown::check_site()` is highly worthwhile and runs a number of checks to ensure you're good-to-go.

Then finally I could flip my *live* site over to continuous deployment, pack away my paint pots, paint roller and step ladder, put my feet up in front of a roaring fire and bask in the warmth of my newly-renovated blogdown home.

